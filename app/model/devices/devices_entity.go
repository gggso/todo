// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package devices

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table devices.
type Entity struct {
    Id         int         `orm:"id,primary"  json:"id"`          // id                                                
    Type       string      `orm:"type"        json:"type"`        // 设备类型 1: 手机                                  
    Model      string      `orm:"model"       json:"model"`       // 型号 getprop ro.product.model                     
    Size       string      `orm:"size"        json:"size"`        // 分辨率 dumpsys window | grep mUnrestrictedScreen  
    AndroidId  string      `orm:"android_id"  json:"android_id"`  // android_id settings get secure android_id         
    Version    string      `orm:"version"     json:"version"`     // 系统版本 getprop ro.build.version.release         
    Sdk        string      `orm:"sdk"         json:"sdk"`         // sdk getprop ro.build.version.sdk                  
    Brand      string      `orm:"brand"       json:"brand"`       // 厂商名称 getprop ro.product.brand                 
    DevicesId  string      `orm:"devices_id"  json:"devices_id"`  // 设备id getprop ro.serialno                        
    Imei       string      `orm:"imei"        json:"imei"`        // IMEI service call iphonesubinfo 1  需要自己处理   
    Mac        string      `orm:"mac"         json:"mac"`         // MAC cat /sys/class/net/wlan0/address              
    Df         string      `orm:"df"          json:"df"`          // 内存 df /data 自己处理                            
    CreateTime *gtime.Time `orm:"create_time" json:"create_time"` // 创建时间                                          
    LastTime   *gtime.Time `orm:"last_time"   json:"last_time"`   // 上次在线时间                                      
    Group      string      `orm:"group"       json:"group"`       // 分组                                              
    Status     string      `orm:"status"      json:"status"`      // 设备状态 0 正常 1 禁用                            
    Uuid       string      `orm:"uuid"        json:"uuid"`        // 设备唯一id                                        
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}